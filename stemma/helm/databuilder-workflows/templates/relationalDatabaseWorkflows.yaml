{{- range $ind, $wf := .Values.rdbWorkflows.workflows }}
apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name:  {{ $.Values.common.customerName }}-{{ $.Values.rdbWorkflows.workflowPrefix }}-{{ $wf.type }}-{{ $ind }}
spec:
  schedule: {{ $wf.schedule | quote }}
  timezone: {{ $wf.timezone | default $.Values.common.defaultTimezone | quote }}
  suspend: {{ $.Values.rdbWorkflows.suspend | default false }}
  concurrencyPolicy: {{ $.Values.common.concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ $.Values.common.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ $.Values.common.failedJobsHistoryLimit }}
  workflowSpec:
    serviceAccountName:  {{ $.Values.common.serviceAccountName }}
    entrypoint: main
    templates:
      - name: main
        dag:
          tasks:
            - name: {{ $wf.type }}-metadata-extract
              template: stemma-databuilder
              arguments:
                parameters:
                  - name: STEMMA_DATABUILDER_TASK
                    value: {{ $wf.type }}-metadata

            ### EXAMPLE: how to dynamically enable tasks for a database
            # {{ if $wf.tasks.stats }}
            # - name: {{ $wf.type }}-stats-extract
            #   template: stemma-databuilder
            #   arguments:
            #     parameters:
            #       - name: STEMMA_DATABUILDER_TASK
            #         value: {{ $wf.type }}-stats
            #   dependencies:
            #     - {{ $wf.type }}-metadata-extract
            # {{ end }}

      - name: stemma-databuilder
        inputs:
          parameters:
            - name: STEMMA_DATABUILDER_TASK
        container:
          image: {{ $.Values.common.image.repo | quote }}
          imagePullPolicy: {{ $.Values.common.image.imagePullPolicy | quote }}
          # https://stackoverflow.com/questions/64802290/how-can-i-use-argo-workflows-templates-in-helm
          command: ["python3", "databuilder/stemma/tasks/run_databuilder.py"]
          args:
            - "{{`{{ inputs.parameters.STEMMA_DATABUILDER_TASK }}`}}"
          # envFrom: TODO
          #   - configMapRef:
          #     name: secret-envvars
          env:
            - name: VAULT_HOST_PORT
              value: {{ $.Values.common.vaultHostPort }}
            - name: JWT_PATH
              value: {{ $.Values.common.vaultJwtTokenLocation }}
            - name: SECRET_MANAGER_CLASS
              value: {{ $.Values.common.secretManagerClass | quote }}
            - name: STEMMA_DATABASE_SECRETS
              value: {{ $.Values.common.amundsenDataScretLocation }}
            - name: {{ $.Values.common.secretEnvironRoleKey }}
              value: {{ $.Values.common.secretEnvironRoleValue }}
            - name: RDB_DATABASE_NAME
              value: {{ $wf.database }}
            - name: {{ $.Values.common.secretEnvironVar }}  # Secret location
              value: {{ $wf.secretLocation | quote }}
---
{{- end }}
